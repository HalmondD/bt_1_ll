
bt_1_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001094  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c4  080011c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080011c4  080011c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c4  080011c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080011cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080011d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080011d8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002c7c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010ac  00000000  00000000  00022cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000440  00000000  00000000  00023da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000306  00000000  00000000  000241e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016838  00000000  00000000  000244e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005387  00000000  00000000  0003ad1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000800a9  00000000  00000000  000400a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ed4  00000000  00000000  000c0150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c1024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001188 	.word	0x08001188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001188 	.word	0x08001188

0800014c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	0a1b      	lsrs	r3, r3, #8
 800015a:	b29a      	uxth	r2, r3
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	611a      	str	r2, [r3, #16]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800016a:	b480      	push	{r7}
 800016c:	b085      	sub	sp, #20
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	68db      	ldr	r3, [r3, #12]
 8000178:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	0a1b      	lsrs	r3, r3, #8
 800017e:	b29b      	uxth	r3, r3
 8000180:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	4013      	ands	r3, r2
 8000188:	041a      	lsls	r2, r3, #16
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	43d9      	mvns	r1, r3
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	400b      	ands	r3, r1
 8000192:	431a      	orrs	r2, r3
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	611a      	str	r2, [r3, #16]
}
 8000198:	bf00      	nop
 800019a:	3714      	adds	r7, #20
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ae:	699a      	ldr	r2, [r3, #24]
 80001b0:	4907      	ldr	r1, [pc, #28]	; (80001d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ba:	699a      	ldr	r2, [r3, #24]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4013      	ands	r3, r2
 80001c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001c2:	68fb      	ldr	r3, [r7, #12]
}
 80001c4:	bf00      	nop
 80001c6:	3714      	adds	r7, #20
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000

080001d4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b04      	cmp	r3, #4
 80001e0:	d106      	bne.n	80001f0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <LL_SYSTICK_SetClkSource+0x34>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a08      	ldr	r2, [pc, #32]	; (8000208 <LL_SYSTICK_SetClkSource+0x34>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80001ee:	e005      	b.n	80001fc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <LL_SYSTICK_SetClkSource+0x34>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a04      	ldr	r2, [pc, #16]	; (8000208 <LL_SYSTICK_SetClkSource+0x34>)
 80001f6:	f023 0304 	bic.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e010 	.word	0xe000e010

0800020c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <LL_SYSTICK_EnableIT+0x18>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a03      	ldr	r2, [pc, #12]	; (8000224 <LL_SYSTICK_EnableIT+0x18>)
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	6013      	str	r3, [r2, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	e000e010 	.word	0xe000e010

08000228 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	fbb2 f3f3 	udiv	r3, r2, r3
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <LL_InitTick+0x30>)
 800023c:	3b01      	subs	r3, #1
 800023e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <LL_InitTick+0x30>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <LL_InitTick+0x30>)
 8000248:	2205      	movs	r2, #5
 800024a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000e010 	.word	0xe000e010

0800025c <delay_ms>:
{
	ms_ticks++;
}

void delay_ms(uint32_t delay_time_ms)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	uint32_t expected_ticks = ms_ticks + delay_time_ms;
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <delay_ms+0x40>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	60fb      	str	r3, [r7, #12]

    if (expected_ticks >= UINT32_T_MAX)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000274:	d106      	bne.n	8000284 <delay_ms+0x28>
    {
        ms_ticks = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <delay_ms+0x40>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
        expected_ticks = delay_time_ms;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	60fb      	str	r3, [r7, #12]
    }

	while (ms_ticks < expected_ticks)
 8000280:	e000      	b.n	8000284 <delay_ms+0x28>
	{
		__asm("nop");
 8000282:	bf00      	nop
	while (ms_ticks < expected_ticks)
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <delay_ms+0x40>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f9      	bhi.n	8000282 <delay_ms+0x26>
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <app_main>:

void app_main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef my_GPIO_InitStruct = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]

    // GPIO Ports Clock Enable
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80002b4:	2010      	movs	r0, #16
 80002b6:	f7ff ff75 	bl	80001a4 <LL_APB2_GRP1_EnableClock>

    // Set GPIOC output
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80002ba:	4912      	ldr	r1, [pc, #72]	; (8000304 <app_main+0x64>)
 80002bc:	4812      	ldr	r0, [pc, #72]	; (8000308 <app_main+0x68>)
 80002be:	f7ff ff45 	bl	800014c <LL_GPIO_SetOutputPin>

    // Init GPIOC
    my_GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <app_main+0x64>)
 80002c4:	607b      	str	r3, [r7, #4]
    my_GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60bb      	str	r3, [r7, #8]
    my_GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002ca:	2302      	movs	r3, #2
 80002cc:	60fb      	str	r3, [r7, #12]
    my_GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
    my_GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOC, &my_GPIO_InitStruct);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4619      	mov	r1, r3
 80002da:	480b      	ldr	r0, [pc, #44]	; (8000308 <app_main+0x68>)
 80002dc:	f000 fec2 	bl	8001064 <LL_GPIO_Init>

    // Set the Systick clock to not div by 8
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80002e0:	2004      	movs	r0, #4
 80002e2:	f7ff ff77 	bl	80001d4 <LL_SYSTICK_SetClkSource>

    // Enable Systick int
    LL_SYSTICK_EnableIT();
 80002e6:	f7ff ff91 	bl	800020c <LL_SYSTICK_EnableIT>

    // Set the Load value and enable Systick
    LL_InitTick(8000000, 1);
 80002ea:	2101      	movs	r1, #1
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <app_main+0x6c>)
 80002ee:	f7ff ff9b 	bl	8000228 <LL_InitTick>

    while(1)
    {
        delay_ms(1000);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f7ff ffb1 	bl	800025c <delay_ms>
        LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 80002fa:	4902      	ldr	r1, [pc, #8]	; (8000304 <app_main+0x64>)
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <app_main+0x68>)
 80002fe:	f7ff ff34 	bl	800016a <LL_GPIO_TogglePin>
        delay_ms(1000);
 8000302:	e7f6      	b.n	80002f2 <app_main+0x52>
 8000304:	04200020 	.word	0x04200020
 8000308:	40011000 	.word	0x40011000
 800030c:	007a1200 	.word	0x007a1200

08000310 <LL_APB2_GRP1_EnableClock>:
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <LL_APB2_GRP1_EnableClock+0x2c>)
 800031a:	699a      	ldr	r2, [r3, #24]
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <LL_APB2_GRP1_EnableClock+0x2c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000326:	699a      	ldr	r2, [r3, #24]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4013      	ands	r3, r2
 800032c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800032e:	68fb      	ldr	r3, [r7, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000344:	f000 f8c4 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000348:	f000 f805 	bl	8000356 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034c:	f000 f83e 	bl	80003cc <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    app_main();
 8000350:	f7ff ffa6 	bl	80002a0 <app_main>
 8000354:	e7fc      	b.n	8000350 <main+0x10>

08000356 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b090      	sub	sp, #64	; 0x40
 800035a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	2228      	movs	r2, #40	; 0x28
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fee3 	bl	8001130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000380:	2310      	movs	r3, #16
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000384:	2300      	movs	r3, #0
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f9d3 	bl	8000738 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000398:	f000 f81f 	bl	80003da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fc41 	bl	8000c3c <HAL_RCC_ClockConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c0:	f000 f80b 	bl	80003da <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	3740      	adds	r7, #64	; 0x40
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80003d0:	2020      	movs	r0, #32
 80003d2:	f7ff ff9d 	bl	8000310 <LL_APB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}

080003da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
}
 80003e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <HAL_MspInit+0x40>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <HAL_MspInit+0x40>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <HAL_MspInit+0x40>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_MspInit+0x40>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <HAL_MspInit+0x40>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <HAL_MspInit+0x40>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  //HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
	...

08000484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000484:	f7ff fff7 	bl	8000476 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800048a:	490c      	ldr	r1, [pc, #48]	; (80004bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004a0:	4c09      	ldr	r4, [pc, #36]	; (80004c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ae:	f000 fe47 	bl	8001140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff ff45 	bl	8000340 <main>
  bx lr
 80004b6:	4770      	bx	lr
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	080011cc 	.word	0x080011cc
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	20000030 	.word	0x20000030

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_Init+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_Init+0x28>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 f8f5 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f808 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ec:	f7ff ff7a 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x58>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f8ff 	bl	800071e <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e00e      	b.n	8000548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d80a      	bhi.n	8000546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f8d5 	bl	80006e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <HAL_InitTick+0x5c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000008 	.word	0x20000008
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <HAL_GetTick+0x10>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	2000002c 	.word	0x2000002c

08000570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800058c:	4013      	ands	r3, r2
 800058e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <__NVIC_GetPriorityGrouping+0x18>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	f003 0307 	and.w	r3, r3, #7
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db0a      	blt.n	80005fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	490c      	ldr	r1, [pc, #48]	; (8000620 <__NVIC_SetPriority+0x4c>)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	440b      	add	r3, r1
 80005f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005fc:	e00a      	b.n	8000614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4908      	ldr	r1, [pc, #32]	; (8000624 <__NVIC_SetPriority+0x50>)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	3b04      	subs	r3, #4
 800060c:	0112      	lsls	r2, r2, #4
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	440b      	add	r3, r1
 8000612:	761a      	strb	r2, [r3, #24]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	f1c3 0307 	rsb	r3, r3, #7
 8000642:	2b04      	cmp	r3, #4
 8000644:	bf28      	it	cs
 8000646:	2304      	movcs	r3, #4
 8000648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3304      	adds	r3, #4
 800064e:	2b06      	cmp	r3, #6
 8000650:	d902      	bls.n	8000658 <NVIC_EncodePriority+0x30>
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3b03      	subs	r3, #3
 8000656:	e000      	b.n	800065a <NVIC_EncodePriority+0x32>
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	f04f 32ff 	mov.w	r2, #4294967295
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43da      	mvns	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	401a      	ands	r2, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000670:	f04f 31ff 	mov.w	r1, #4294967295
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43d9      	mvns	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	4313      	orrs	r3, r2
         );
}
 8000682:	4618      	mov	r0, r3
 8000684:	3724      	adds	r7, #36	; 0x24
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800069c:	d301      	bcc.n	80006a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2301      	movs	r3, #1
 80006a0:	e00f      	b.n	80006c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <SysTick_Config+0x40>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006aa:	210f      	movs	r1, #15
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f7ff ff90 	bl	80005d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <SysTick_Config+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <SysTick_Config+0x40>)
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff49 	bl	8000570 <__NVIC_SetPriorityGrouping>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f8:	f7ff ff5e 	bl	80005b8 <__NVIC_GetPriorityGrouping>
 80006fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	6978      	ldr	r0, [r7, #20]
 8000704:	f7ff ff90 	bl	8000628 <NVIC_EncodePriority>
 8000708:	4602      	mov	r2, r0
 800070a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff5f 	bl	80005d4 <__NVIC_SetPriority>
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffb0 	bl	800068c <SysTick_Config>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e272      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	f000 8087 	beq.w	8000866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000758:	4b92      	ldr	r3, [pc, #584]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	2b04      	cmp	r3, #4
 8000762:	d00c      	beq.n	800077e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000764:	4b8f      	ldr	r3, [pc, #572]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f003 030c 	and.w	r3, r3, #12
 800076c:	2b08      	cmp	r3, #8
 800076e:	d112      	bne.n	8000796 <HAL_RCC_OscConfig+0x5e>
 8000770:	4b8c      	ldr	r3, [pc, #560]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800077c:	d10b      	bne.n	8000796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800077e:	4b89      	ldr	r3, [pc, #548]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d06c      	beq.n	8000864 <HAL_RCC_OscConfig+0x12c>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d168      	bne.n	8000864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e24c      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079e:	d106      	bne.n	80007ae <HAL_RCC_OscConfig+0x76>
 80007a0:	4b80      	ldr	r3, [pc, #512]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a7f      	ldr	r2, [pc, #508]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e02e      	b.n	800080c <HAL_RCC_OscConfig+0xd4>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10c      	bne.n	80007d0 <HAL_RCC_OscConfig+0x98>
 80007b6:	4b7b      	ldr	r3, [pc, #492]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a7a      	ldr	r2, [pc, #488]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b78      	ldr	r3, [pc, #480]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a77      	ldr	r2, [pc, #476]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	e01d      	b.n	800080c <HAL_RCC_OscConfig+0xd4>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007d8:	d10c      	bne.n	80007f4 <HAL_RCC_OscConfig+0xbc>
 80007da:	4b72      	ldr	r3, [pc, #456]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a71      	ldr	r2, [pc, #452]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a6e      	ldr	r2, [pc, #440]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e00b      	b.n	800080c <HAL_RCC_OscConfig+0xd4>
 80007f4:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a6a      	ldr	r2, [pc, #424]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80007fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b68      	ldr	r3, [pc, #416]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a67      	ldr	r2, [pc, #412]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800080a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d013      	beq.n	800083c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000814:	f7ff fea2 	bl	800055c <HAL_GetTick>
 8000818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800081a:	e008      	b.n	800082e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800081c:	f7ff fe9e 	bl	800055c <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b64      	cmp	r3, #100	; 0x64
 8000828:	d901      	bls.n	800082e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e200      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f0      	beq.n	800081c <HAL_RCC_OscConfig+0xe4>
 800083a:	e014      	b.n	8000866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800083c:	f7ff fe8e 	bl	800055c <HAL_GetTick>
 8000840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000842:	e008      	b.n	8000856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000844:	f7ff fe8a 	bl	800055c <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b64      	cmp	r3, #100	; 0x64
 8000850:	d901      	bls.n	8000856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000852:	2303      	movs	r3, #3
 8000854:	e1ec      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f0      	bne.n	8000844 <HAL_RCC_OscConfig+0x10c>
 8000862:	e000      	b.n	8000866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	2b00      	cmp	r3, #0
 8000870:	d063      	beq.n	800093a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f003 030c 	and.w	r3, r3, #12
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00b      	beq.n	8000896 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800087e:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 030c 	and.w	r3, r3, #12
 8000886:	2b08      	cmp	r3, #8
 8000888:	d11c      	bne.n	80008c4 <HAL_RCC_OscConfig+0x18c>
 800088a:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d116      	bne.n	80008c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000896:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d005      	beq.n	80008ae <HAL_RCC_OscConfig+0x176>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d001      	beq.n	80008ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e1c0      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4939      	ldr	r1, [pc, #228]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008c2:	e03a      	b.n	800093a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d020      	beq.n	800090e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_RCC_OscConfig+0x270>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d2:	f7ff fe43 	bl	800055c <HAL_GetTick>
 80008d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d8:	e008      	b.n	80008ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008da:	f7ff fe3f 	bl	800055c <HAL_GetTick>
 80008de:	4602      	mov	r2, r0
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d901      	bls.n	80008ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008e8:	2303      	movs	r3, #3
 80008ea:	e1a1      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f0      	beq.n	80008da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4927      	ldr	r1, [pc, #156]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000908:	4313      	orrs	r3, r2
 800090a:	600b      	str	r3, [r1, #0]
 800090c:	e015      	b.n	800093a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <HAL_RCC_OscConfig+0x270>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000914:	f7ff fe22 	bl	800055c <HAL_GetTick>
 8000918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800091a:	e008      	b.n	800092e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800091c:	f7ff fe1e 	bl	800055c <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b02      	cmp	r3, #2
 8000928:	d901      	bls.n	800092e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800092a:	2303      	movs	r3, #3
 800092c:	e180      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f0      	bne.n	800091c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	2b00      	cmp	r3, #0
 8000944:	d03a      	beq.n	80009bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d019      	beq.n	8000982 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000954:	f7ff fe02 	bl	800055c <HAL_GetTick>
 8000958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095a:	e008      	b.n	800096e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800095c:	f7ff fdfe 	bl	800055c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2b02      	cmp	r3, #2
 8000968:	d901      	bls.n	800096e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800096a:	2303      	movs	r3, #3
 800096c:	e160      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0f0      	beq.n	800095c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fa9c 	bl	8000eb8 <RCC_Delay>
 8000980:	e01c      	b.n	80009bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000988:	f7ff fde8 	bl	800055c <HAL_GetTick>
 800098c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800098e:	e00f      	b.n	80009b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000990:	f7ff fde4 	bl	800055c <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d908      	bls.n	80009b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e146      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	42420000 	.word	0x42420000
 80009ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	4b92      	ldr	r3, [pc, #584]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e9      	bne.n	8000990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80a6 	beq.w	8000b16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ce:	4b8b      	ldr	r3, [pc, #556]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b88      	ldr	r3, [pc, #544]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a87      	ldr	r2, [pc, #540]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b85      	ldr	r3, [pc, #532]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009f2:	2301      	movs	r3, #1
 80009f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f6:	4b82      	ldr	r3, [pc, #520]	; (8000c00 <HAL_RCC_OscConfig+0x4c8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d118      	bne.n	8000a34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a02:	4b7f      	ldr	r3, [pc, #508]	; (8000c00 <HAL_RCC_OscConfig+0x4c8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a7e      	ldr	r2, [pc, #504]	; (8000c00 <HAL_RCC_OscConfig+0x4c8>)
 8000a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fda5 	bl	800055c <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a16:	f7ff fda1 	bl	800055c <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b64      	cmp	r3, #100	; 0x64
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e103      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a28:	4b75      	ldr	r3, [pc, #468]	; (8000c00 <HAL_RCC_OscConfig+0x4c8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f0      	beq.n	8000a16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d106      	bne.n	8000a4a <HAL_RCC_OscConfig+0x312>
 8000a3c:	4b6f      	ldr	r3, [pc, #444]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a6e      	ldr	r2, [pc, #440]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	e02d      	b.n	8000aa6 <HAL_RCC_OscConfig+0x36e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10c      	bne.n	8000a6c <HAL_RCC_OscConfig+0x334>
 8000a52:	4b6a      	ldr	r3, [pc, #424]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a54:	6a1b      	ldr	r3, [r3, #32]
 8000a56:	4a69      	ldr	r2, [pc, #420]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	6213      	str	r3, [r2, #32]
 8000a5e:	4b67      	ldr	r3, [pc, #412]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4a66      	ldr	r2, [pc, #408]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a64:	f023 0304 	bic.w	r3, r3, #4
 8000a68:	6213      	str	r3, [r2, #32]
 8000a6a:	e01c      	b.n	8000aa6 <HAL_RCC_OscConfig+0x36e>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d10c      	bne.n	8000a8e <HAL_RCC_OscConfig+0x356>
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	4a60      	ldr	r2, [pc, #384]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6213      	str	r3, [r2, #32]
 8000a80:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	4a5d      	ldr	r2, [pc, #372]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6213      	str	r3, [r2, #32]
 8000a8c:	e00b      	b.n	8000aa6 <HAL_RCC_OscConfig+0x36e>
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a94:	f023 0301 	bic.w	r3, r3, #1
 8000a98:	6213      	str	r3, [r2, #32]
 8000a9a:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4a57      	ldr	r2, [pc, #348]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000aa0:	f023 0304 	bic.w	r3, r3, #4
 8000aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d015      	beq.n	8000ada <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aae:	f7ff fd55 	bl	800055c <HAL_GetTick>
 8000ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab4:	e00a      	b.n	8000acc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ab6:	f7ff fd51 	bl	800055c <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d901      	bls.n	8000acc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e0b1      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000acc:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0ee      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x37e>
 8000ad8:	e014      	b.n	8000b04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ada:	f7ff fd3f 	bl	800055c <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae0:	e00a      	b.n	8000af8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ae2:	f7ff fd3b 	bl	800055c <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d901      	bls.n	8000af8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e09b      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af8:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1ee      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b04:	7dfb      	ldrb	r3, [r7, #23]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d105      	bne.n	8000b16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b0a:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a3b      	ldr	r2, [pc, #236]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8087 	beq.w	8000c2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d061      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d146      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_RCC_OscConfig+0x4cc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3a:	f7ff fd0f 	bl	800055c <HAL_GetTick>
 8000b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b40:	e008      	b.n	8000b54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b42:	f7ff fd0b 	bl	800055c <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e06d      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f0      	bne.n	8000b42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a1b      	ldr	r3, [r3, #32]
 8000b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b68:	d108      	bne.n	8000b7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4921      	ldr	r1, [pc, #132]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a19      	ldr	r1, [r3, #32]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	491b      	ldr	r1, [pc, #108]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_RCC_OscConfig+0x4cc>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fcdf 	bl	800055c <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ba2:	f7ff fcdb 	bl	800055c <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e03d      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46a>
 8000bc0:	e035      	b.n	8000c2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_RCC_OscConfig+0x4cc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcc8 	bl	800055c <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd0:	f7ff fcc4 	bl	800055c <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e026      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f0      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x498>
 8000bee:	e01e      	b.n	8000c2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d107      	bne.n	8000c08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e019      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40007000 	.word	0x40007000
 8000c04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_RCC_OscConfig+0x500>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d001      	beq.n	8000c2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e0d0      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c50:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d910      	bls.n	8000c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5e:	4b67      	ldr	r3, [pc, #412]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 0207 	bic.w	r2, r3, #7
 8000c66:	4965      	ldr	r1, [pc, #404]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d001      	beq.n	8000c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0b8      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d020      	beq.n	8000cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c98:	4b59      	ldr	r3, [pc, #356]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a58      	ldr	r2, [pc, #352]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cb0:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a52      	ldr	r2, [pc, #328]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cbc:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	494d      	ldr	r1, [pc, #308]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d040      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d107      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d115      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e07f      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d107      	bne.n	8000d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d109      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e073      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e06b      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f023 0203 	bic.w	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4936      	ldr	r1, [pc, #216]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fc16 	bl	800055c <HAL_GetTick>
 8000d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d32:	e00a      	b.n	8000d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d34:	f7ff fc12 	bl	800055c <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e053      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 020c 	and.w	r2, r3, #12
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d1eb      	bne.n	8000d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d210      	bcs.n	8000d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 0207 	bic.w	r2, r3, #7
 8000d72:	4922      	ldr	r1, [pc, #136]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_RCC_ClockConfig+0x1c0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d001      	beq.n	8000d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e032      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4916      	ldr	r1, [pc, #88]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	490e      	ldr	r1, [pc, #56]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dca:	f000 f821 	bl	8000e10 <HAL_RCC_GetSysClockFreq>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	091b      	lsrs	r3, r3, #4
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	490a      	ldr	r1, [pc, #40]	; (8000e04 <HAL_RCC_ClockConfig+0x1c8>)
 8000ddc:	5ccb      	ldrb	r3, [r1, r3]
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_RCC_ClockConfig+0x1cc>)
 8000de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1d0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb86 	bl	80004fc <HAL_InitTick>

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	080011a0 	.word	0x080011a0
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d002      	beq.n	8000e40 <HAL_RCC_GetSysClockFreq+0x30>
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d003      	beq.n	8000e46 <HAL_RCC_GetSysClockFreq+0x36>
 8000e3e:	e027      	b.n	8000e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e42:	613b      	str	r3, [r7, #16]
      break;
 8000e44:	e027      	b.n	8000e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	0c9b      	lsrs	r3, r3, #18
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e50:	5cd3      	ldrb	r3, [r2, r3]
 8000e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d010      	beq.n	8000e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	0c5b      	lsrs	r3, r3, #17
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e72:	fb03 f202 	mul.w	r2, r3, r2
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e004      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	613b      	str	r3, [r7, #16]
      break;
 8000e8e:	e002      	b.n	8000e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e92:	613b      	str	r3, [r7, #16]
      break;
 8000e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e96:	693b      	ldr	r3, [r7, #16]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	007a1200 	.word	0x007a1200
 8000eac:	080011b0 	.word	0x080011b0
 8000eb0:	080011c0 	.word	0x080011c0
 8000eb4:	003d0900 	.word	0x003d0900

08000eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <RCC_Delay+0x34>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <RCC_Delay+0x38>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0a5b      	lsrs	r3, r3, #9
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ed4:	bf00      	nop
  }
  while (Delay --);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	60fa      	str	r2, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f9      	bne.n	8000ed4 <RCC_Delay+0x1c>
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	10624dd3 	.word	0x10624dd3

08000ef4 <LL_GPIO_SetPinMode>:
{
 8000ef4:	b490      	push	{r4, r7}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	0e1b      	lsrs	r3, r3, #24
 8000f08:	4413      	add	r3, r2
 8000f0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000f0c:	6822      	ldr	r2, [r4, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	210f      	movs	r1, #15
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	61bb      	str	r3, [r7, #24]
  return result;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	6023      	str	r3, [r4, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc90      	pop	{r4, r7}
 8000f56:	4770      	bx	lr

08000f58 <LL_GPIO_SetPinSpeed>:
{
 8000f58:	b490      	push	{r4, r7}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	0e1b      	lsrs	r3, r3, #24
 8000f6c:	4413      	add	r3, r2
 8000f6e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000f70:	6822      	ldr	r2, [r4, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	613b      	str	r3, [r7, #16]
  return result;
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	2103      	movs	r1, #3
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	6023      	str	r3, [r4, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc90      	pop	{r4, r7}
 8000fba:	4770      	bx	lr

08000fbc <LL_GPIO_SetPinOutputType>:
{
 8000fbc:	b490      	push	{r4, r7}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	0e1b      	lsrs	r3, r3, #24
 8000fd0:	4413      	add	r3, r2
 8000fd2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	613b      	str	r3, [r7, #16]
  return result;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	2104      	movs	r1, #4
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61bb      	str	r3, [r7, #24]
  return result;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	6023      	str	r3, [r4, #0]
}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bc90      	pop	{r4, r7}
 800101e:	4770      	bx	lr

08001020 <LL_GPIO_SetPinPull>:
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	43db      	mvns	r3, r3
 8001036:	401a      	ands	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	613b      	str	r3, [r7, #16]
  return result;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	408b      	lsls	r3, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	60da      	str	r2, [r3, #12]
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	60fb      	str	r3, [r7, #12]
  return result;
 8001084:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800108e:	e044      	b.n	800111a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	409a      	lsls	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d03a      	beq.n	8001114 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d806      	bhi.n	80010b2 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80010a4:	f240 1201 	movw	r2, #257	; 0x101
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e008      	b.n	80010c4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b08      	subs	r3, #8
 80010b6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c2:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d106      	bne.n	80010da <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	461a      	mov	r2, r3
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa3 	bl	8001020 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	69b9      	ldr	r1, [r7, #24]
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff06 	bl	8000ef4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <LL_GPIO_Init+0x94>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b09      	cmp	r3, #9
 80010f6:	d10d      	bne.n	8001114 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	461a      	mov	r2, r3
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	461a      	mov	r2, r3
 800110c:	69b9      	ldr	r1, [r7, #24]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff54 	bl	8000fbc <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3301      	adds	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1b4      	bne.n	8001090 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <memset>:
 8001130:	4603      	mov	r3, r0
 8001132:	4402      	add	r2, r0
 8001134:	4293      	cmp	r3, r2
 8001136:	d100      	bne.n	800113a <memset+0xa>
 8001138:	4770      	bx	lr
 800113a:	f803 1b01 	strb.w	r1, [r3], #1
 800113e:	e7f9      	b.n	8001134 <memset+0x4>

08001140 <__libc_init_array>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	2600      	movs	r6, #0
 8001144:	4d0c      	ldr	r5, [pc, #48]	; (8001178 <__libc_init_array+0x38>)
 8001146:	4c0d      	ldr	r4, [pc, #52]	; (800117c <__libc_init_array+0x3c>)
 8001148:	1b64      	subs	r4, r4, r5
 800114a:	10a4      	asrs	r4, r4, #2
 800114c:	42a6      	cmp	r6, r4
 800114e:	d109      	bne.n	8001164 <__libc_init_array+0x24>
 8001150:	f000 f81a 	bl	8001188 <_init>
 8001154:	2600      	movs	r6, #0
 8001156:	4d0a      	ldr	r5, [pc, #40]	; (8001180 <__libc_init_array+0x40>)
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <__libc_init_array+0x44>)
 800115a:	1b64      	subs	r4, r4, r5
 800115c:	10a4      	asrs	r4, r4, #2
 800115e:	42a6      	cmp	r6, r4
 8001160:	d105      	bne.n	800116e <__libc_init_array+0x2e>
 8001162:	bd70      	pop	{r4, r5, r6, pc}
 8001164:	f855 3b04 	ldr.w	r3, [r5], #4
 8001168:	4798      	blx	r3
 800116a:	3601      	adds	r6, #1
 800116c:	e7ee      	b.n	800114c <__libc_init_array+0xc>
 800116e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001172:	4798      	blx	r3
 8001174:	3601      	adds	r6, #1
 8001176:	e7f2      	b.n	800115e <__libc_init_array+0x1e>
 8001178:	080011c4 	.word	0x080011c4
 800117c:	080011c4 	.word	0x080011c4
 8001180:	080011c4 	.word	0x080011c4
 8001184:	080011c8 	.word	0x080011c8

08001188 <_init>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	bf00      	nop
 800118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118e:	bc08      	pop	{r3}
 8001190:	469e      	mov	lr, r3
 8001192:	4770      	bx	lr

08001194 <_fini>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	bf00      	nop
 8001198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119a:	bc08      	pop	{r3}
 800119c:	469e      	mov	lr, r3
 800119e:	4770      	bx	lr
